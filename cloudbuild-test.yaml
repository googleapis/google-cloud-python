# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TODO(https://github.com/googleapis/google-cloud-python/issues/14142):
# Reduce this timeout by moving the installation of Python runtimes to a separate base image
timeout: 7200s  # 2 hours for the first uncached run, can be lowered later.
steps:
  # Step 1: Build the generator image using Kaniko and push it to the registry.
  - name: 'gcr.io/kaniko-project/executor:latest'
    id: 'build-generator'
    args:
      # Specifies the Dockerfile path
      - '--dockerfile=.generator/Dockerfile'
      # Specifies the build context directory
      - '--context=.'
      # The final destination for the image
      - '--destination=gcr.io/$PROJECT_ID/python-librarian-generator:latest'
      # Enables Kaniko's remote registry caching
      - '--cache=true'
      # Sets a time-to-live for cache layers
      - '--cache-ttl=24h'

  # Step 2: Clone the googleapis repository into the workspace.
  # This runs in parallel with the image build.
  - name: 'gcr.io/cloud-builders/git'
    id: 'clone-googleapis'
    args: ['clone', '--depth', '1', 'https://github.com/googleapis/googleapis.git', '/workspace/googleapis']
    waitFor: ['-']

  # Step 3: Run the generator to generate the library code.
  - name: 'gcr.io/cloud-builders/docker'
    id: 'generate-library'
    args:
      - 'run'
      - '--rm'
      # Mount the cloned googleapis repo from the workspace.
      - '-v'
      - '/workspace/googleapis:/app/source'
      # Mount the generator-input from this repo's workspace.
      - '-v'
      - '/workspace/.librarian/generator-input:/app/input'
      # Mount the test-resources/librarian from this repo's workspace as the librarian dir.
      - '-v'
      - '/workspace/.generator/test-resources/librarian:/app/librarian'
      # The image that was built in the first step.
      - 'gcr.io/$PROJECT_ID/python-librarian-generator:latest'
      # The command to execute inside the container.
      - 'generate'
    waitFor: ['build-generator', 'clone-googleapis']

  # Step 4: Run the generator to test the library code.
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-library'
    waitFor: ['generate-library']
    args:
      - 'run'
      - '--rm'
      # Mount the test-resources/librarian from this repo's workspace as the librarian dir.
      - '-v'
      - '/workspace/.generator/test-resources/librarian:/app/librarian'
      # We run the `build` command against the checked in google-cloud-language package.
      - '-v'
      - '/workspace:/app/repo'
      # The image that was built in the first step.
      - 'gcr.io/$PROJECT_ID/python-librarian-generator:latest'
      # The command to execute inside the container.
      - 'build'

options:
  default_logs_bucket_behavior: REGIONAL_USER_OWNED_BUCKET
  machineType: E2_HIGHCPU_32
